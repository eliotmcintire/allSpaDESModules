install.packages("NetLogoR", repos = c("https://predictiveecology.r-universe.dev", getOption("repos")))
newModule("test2")
library("SpaDES.core")
newModule("test2")
library(SpaDES.core)
s <- simInit(modules = "Biomass_borealDataPrep", paths = list(modulePath = "modules"))
library(SpaDES.core)
options(spades.dotInputObjects = FALSE)
s <- simInit(modules = "fireSense_dataPrepFit", paths = list(modulePath = "modules"))
library(SpaDES.project)
setupProject(modules = "PredictiveEcology/Biomass_borealDataPrep@terra-migration", useGit = TRUE)
sim
sim <- setupProject(modules = "PredictiveEcology/Biomass_borealDataPrep@terra-migration", useGit = TRUE)
params(sim)
library(SpaDES.core)
options(spades.dotInputObjects = FALSE)
s <- simInit(modules = "Biomass_borealDataPrep")
s
depends(s)
moduleMetadata(s)
a <- moduleMetadata(s)
str(a)
sim <- setupProject(modules = c("PredictiveEcology/Biomass_borealDataPrep@terra-migration",
"PredictiveEcology/Biomass_core@terra-migration"),
useGit = TRUE)
library(SpaDES.core)
out <- setupProject(modules = c("PredictiveEcology/Biomass_borealDataPrep@terra-migration",
"PredictiveEcology/Biomass_core@terra-migration"),
useGit = TRUE)
sim <- do.call(simInit, out)
library(SpaDES.core)
out <- setupProject(modules = c("PredictiveEcology/Biomass_borealDataPrep@terra-migration",
"PredictiveEcology/Biomass_core@terra-migration"),
useGit = TRUE)
sim <- do.call(simInit, out)
a <- moduleMetadata(sim)
a$Biomass_borealDataPrep$parameters[paramName == "dataYear"]
a$Biomass_borealDataPrep$parameters[a$Biomass_borealDataPrep$parameters$paramName == "dataYear"]
a$Biomass_borealDataPrep$parameters[a$Biomass_borealDataPrep$parameters$paramName == "dataYear",]
a$Biomass_borealDataPrep$parameters[a$Biomass_borealDataPrep$parameters$paramName == "dataYear","default"]
a$Biomass_borealDataPrep$parameters[a$Biomass_borealDataPrep$parameters$paramName == "dataYear",]$default
a$Biomass_borealDataPrep$parameters[a$Biomass_borealDataPrep$parameters$paramName == "dataYear",]$default
defaults <- moduleMetadata(sim)
defaults[[currentModule(sim)]]
defaults <- moduleMetadata(sim)
defaults$Biomass_borealDataPrep
defaults <- moduleMetadata(sim)
defaults[[currentModule(sim)]]$parameters
defaults <- moduleMetadata(sim)
defaults <- moduleMetadata(sim)
defaults[[currentModule(sim)]]$parameters
defaults <- moduleMetadata(sim)
defaults <- moduleMetadata(sim)
# defaults[[currentModule(sim)]]$parameters
defaults[["Biomass_borealDataPrep"]]$parameters
defaults[defaults$paramName == "dataYear","default"]
defaults
# defaults <- moduleMetadata(sim)[[currentModule(sim)]]$parameters
defaults <- moduleMetadata(sim)[["Biomass_borealDataPrep"]]$parameters
defaults[defaults$paramName == "dataYear","default"]
is(defaults)
# defaults <- moduleMetadata(sim)[[currentModule(sim)]]$parameters
defaults <- moduleMetadata(sim)[["Biomass_borealDataPrep"]]$parameters
unlist(defaults[defaults$paramName == "dataYear","default"])
moduleMetadata
packageVersion("Require")
library(SpaDES.project)
outs <- setupProject(packages = c("SpaDES.core", "pkgload", "igraph", "visNetwork", "DiagrammeR"),
# paths = list(modulePath = c("modules)),
options = list(repos = unique(c("https://predictiveecology.r-universe.dev", getOption("repos"))),
spades.dotInputObjects = FALSE),
modules = "bcgov/castor",
useGit = TRUE)
outs$paths <- setupPaths(paths = list(modulePath = "modules/castor/R/SpaDES-modules"))
outs$modules <- dir(outs$paths$modulePath)
outs
library(SpaDES.project)
outs <- setupProject(packages = c("SpaDES.core", "pkgload", "igraph", "visNetwork", "DiagrammeR"),
# paths = list(modulePath = c("modules)),
options = list(repos = unique(c("https://predictiveecology.r-universe.dev", getOption("repos"))),
spades.dotInputObjects = FALSE),
modules = "bcgov/castor",
useGit = TRUE)
outs$paths <- setupPaths(paths = list(modulePath = "modules/castor/R/SpaDES-modules"))
outs$modules <- dir(outs$paths$modulePath)
outs$paths <- setupPaths(paths = list(modulePath = "modules/castor/R/SpaDES-modules"))
outs$paths$packagePath <- NULL
outs$paths$projectPath <- NULL
outs
library(reproducible)
getOrUpdatePkg <- function(p, minVer, repo) {
if (!isFALSE(try(packageVersion(p) < minVer, silent = TRUE) )) {
if (missing(repo)) repo = c("predictiveecology.r-universe.dev", getOption("repos"))
install.packages(p, repos = repo)
}
}
.libPaths()
getOrUpdatePkg <- function(p, minVer, repo) {
if (!isFALSE(try(packageVersion(p) < minVer, silent = TRUE) )) {
if (missing(repo)) repo = c("predictiveecology.r-universe.dev", getOption("repos"))
install.packages(p, repos = repo)
}
}
getOrUpdatePkg("Require", "0.3.1.14")
getOrUpdatePkg("SpaDES.project", "0.0.8.9012")
getOrUpdatePkg("SpaDES.core", "2.0.2.9006")
getOrUpdatePkg <- function(p, minVer, repo) {
if (!isFALSE(try(packageVersion(p) < minVer, silent = TRUE) )) {
if (missing(repo)) repo = c("predictiveecology.r-universe.dev", getOption("repos"))
install.packages(p, repos = repo)
}
}
getOrUpdatePkg("Require", "0.3.1.14")
getOrUpdatePkg("SpaDES.project", "0.0.8.9012")
getOrUpdatePkg("SpaDES.core", "2.0.2.9006")
getOrUpdatePkg("SpaDES.project", "2.0.8.9006")
setupProject(modules = "bcgov/caster")
library(SpaDES.project)
setupProject(modules = "bcgov/caster")
setupProject(modules = "bcgov/castor")
getModule("bcgov/castor")
out <- setupProject() # sets paths
getModule("bcgov/castor", modulePath = out$paths$modulePath)
mods <- listModules("fireSense", "PredictiveEcology")
mods
out <- setupProject(modules = mods,
useGit = TRUE) # get fireSense modules & sets paths
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = TRUE) # get fireSense modules & sets paths
setwd(filepath(out$paths$modulePath, "fireSense")); system("git branch --sort=-committerdate")
setwd(file.path(out$paths$modulePath, "fireSense")); system("git branch --sort=-committerdate")
setwd(file.path(out$paths$modulePath, "fireSense")); system("git fetch")
setwd(file.path(out$paths$modulePath, "fireSense")); system("git branch --sort=-committerdate")
lapply(Require::extractPkgName(mods), function(mod) {})
setwd(file.path(out$paths$modulePath, "fireSense")); system("git branch --sort=-committerdate")
lapply(Require::extractPkgName(mods), function(mod) {
setwd(file.path(out$paths$modulePath, mod)); system("git branch --sort=-committerdate")
})
setwd(file.path(out$paths$modulePath, "fireSense")); system("git branch --sort=-committerdate")
lapply(Require::extractPkgName(mods), function(mod) {
setwd(file.path(out$paths$modulePath, mod));
system("git fetch")
system("git branch --sort=-committerdate")
})
setwd(file.path(out$paths$modulePath, "fireSense")); system("git branch --sort=-committerdate")
debug(setupModules)
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = TRUE) # get fireSense modules & sets paths
isGH
isGitRepoAlready
getwd()
setwd("../..")
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = TRUE) # get fireSense modules & sets paths
isGitRepoAlready
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = "sub") # get fireSense modules & sets paths
getOrUpdatePkg <- function(p, minVer, repo) {
if (!isFALSE(try(packageVersion(p) < minVer, silent = TRUE) )) {
if (missing(repo)) repo = c("predictiveecology.r-universe.dev", getOption("repos"))
install.packages(p, repos = repo)
}
}
getOrUpdatePkg("Require", "0.3.1.14")
getOrUpdatePkg("SpaDES.project", "0.0.8.9013")
getOrUpdatePkg("SpaDES.core", "2.0.2.9006")
getOrUpdatePkg("SpaDES.project", "2.0.8.9006")
getOrUpdatePkg <- function(p, minVer, repo) {
if (!isFALSE(try(packageVersion(p) < minVer, silent = TRUE) )) {
if (missing(repo)) repo = c("predictiveecology.r-universe.dev", getOption("repos"))
install.packages(p, repos = repo)
}
}
getOrUpdatePkg("Require", "0.3.1.14")
getOrUpdatePkg("SpaDES.project", "0.0.8.9013")
getOrUpdatePkg("SpaDES.core", "2.0.2.9006")
getOrUpdatePkg("SpaDES.project", "2.0.8.9006")
getOrUpdatePkg("reproducible", "2.0.8.9006")
library(SpaDES.project)
mods <- listModules("fireSense", "PredictiveEcology")
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = TRUE) # get fireSense modules & sets paths
pkgload::load_all("c:/Eliot/GitHub/SpaDES.project")
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = TRUE) # get fireSense modules & sets paths
isGitRepoAlready
dir(all.files = T)
dir(all.files = T, full.names = T)
unlink(dir(all.files = T, full.names = T)[3:5], recursive = TRUE)
dir(all.files = T, full.names = T)
unlink(dir(all.files = T, full.names = T)[3], recursive = TRUE)
dir(all.files = T, full.names = T)[3]
Q
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = TRUE) # get fireSense modules & sets paths
isGitRepoAlready
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = "sub") # get fireSense modules & sets paths
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = "sub") # get fireSense modules & sets paths
ignoreAFolder
ignoreAFolder(gitIgnoreFile = ".gitIgnore", paths$cachePath, paths$projectPath)
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = "sub") # get fireSense modules & sets paths
ignoreAFolder(gitIgnoreFile = ".gitIgnore", paths$cachePath, paths$projectPath)
pkgload::load_all("c:/Eliot/GitHub/SpaDES.project")
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = "sub") # get fireSense modules & sets paths
ignoreAFolder(gitIgnoreFile = ".gitIgnore", paths$cachePath, paths$projectPath)
ignoreAFolder(gitIgnoreFile = ".gitIgnore", paths$inputPath, paths$projectPath)
cachePathGrep <- paste0("^", cp, "$")
(!any(grepl(cachePathGrep, gi)))
cp <- paths$cachePath
cachePathGrep <- paste0("^", cp, "$")
cachePathGrep
cp <- reproducible:::makeRelative(paths$cachePath, absoluteBase = paths$projectPath)
cp
cachePathGrep <- paste0("^", cp, "$")
(!any(grepl(cachePathGrep, gi)))
pkgload::load_all("c:/Eliot/GitHub/SpaDES.project")
out <- setupProject(modules = mods,
options = list(Require.cloneFrom = Sys.getenv("R_LIBS_USER")),
useGit = "sub") # get fireSense modules & sets paths
ignoreAFolder(gitIgnoreFile = ".gitIgnore", paths$cachePath, paths$projectPath)
ignoreAFolder(gitIgnoreFile = ".gitIgnore", paths$inputPath, paths$projectPath)
system(paste("git commit ."))
system(paste("git commit ."))
rl <- readline("Update git config --global --edit ? (Y or N): ")
(startsWith(tolower(rl), "y") )
system(paste0("git config --global --edit "))
rl <- readline("Need to amend this commit to use this new user ? (Y or N): ")
(startsWith(tolower(rl), "y") )
system(paste0("git commit --amend --reset-author"))
